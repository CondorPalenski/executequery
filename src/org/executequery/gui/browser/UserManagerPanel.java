/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.executequery.gui.browser;

import biz.redsoft.IFBUser;
import biz.redsoft.IFBUserManager;
import org.executequery.GUIUtilities;
import org.executequery.components.table.BrowserTableCellRenderer;
import org.executequery.components.table.RoleTableModel;
import org.executequery.components.table.RowHeaderRenderer;
import org.executequery.databasemediators.DatabaseConnection;
import org.executequery.databasemediators.DatabaseDriver;
import org.executequery.databaseobjects.DatabaseHost;
import org.executequery.databaseobjects.impl.DefaultDatabaseHost;
import org.executequery.datasource.ConnectionManager;
import org.executequery.gui.browser.BrowserConstants;
import org.executequery.gui.browser.BrowserController;
import org.executequery.gui.browser.managment.FrameLogin;
import org.executequery.gui.browser.managment.ThreadOfUserManager;
import org.executequery.gui.browser.managment.WindowAddRole;
import org.executequery.gui.browser.managment.WindowAddUser;
import org.executequery.localization.Bundles;
import org.executequery.log.Log;
import org.executequery.repository.DatabaseConnectionRepository;
import org.executequery.repository.DatabaseDriverRepository;
import org.executequery.repository.RepositoryCache;
import org.underworldlabs.util.MiscUtils;

import javax.swing.*;
import java.awt.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.sql.*;
import java.util.List;
import java.util.Map;
import java.util.Vector;

/**
 * @author mikhan808
 */
public class UserManagerPanel extends JPanel {

    /**
     * Creates new form UserManagerPanel
     */
    public UserManagerPanel() {
        gr = GUIUtilities.loadIcon(BrowserConstants.GRANT_IMAGE);
        no = GUIUtilities.loadIcon(BrowserConstants.NO_GRANT_IMAGE);
        adm = GUIUtilities.loadIcon(BrowserConstants.ADMIN_OPTION_IMAGE);
        execute_w = false;
        user_names = new Vector<String>();
        role_names = new Vector<String>();
        initComponents();
        setEnableElements(true);
        listConnections = ((DatabaseConnectionRepository) RepositoryCache.load(DatabaseConnectionRepository.REPOSITORY_ID)).findAll();
        init_user_manager();
        enableElements=true;
        for (DatabaseConnection dc : listConnections) {
            databaseBox.addItem(dc.getName());
            if (dc.isConnected()) {
                execute_w = true;
                databaseBox.setSelectedItem(dc.getName());
            }
        }
        if (!execute_w) {
            execute_w = true;
            databaseBox.setSelectedIndex(0);
        }
    }

    // Variables declaration - do not modify
    private JButton addUserButton;
    private JButton addRoleButton;
    private JButton adminButton;
    private JComboBox<String> databaseBox;
    private JLabel databaseLabel;
    private JButton deleteUserButton;
    private JButton deleteRoleButton;
    private JButton editUserButton;
    private JButton grantButton;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTabbedPane jTabbedPane1;
    private JPanel membershipPanel;
    private JTable membershipTable;
    private JButton no_grantButton;
    private JButton refreshUsersButton;
    private JPanel rolesPanel;
    private JComboBox<String> serverBox;
    private JLabel serverLabel;
    private JPanel usersPanel;
    private JTable usersTable;
    private JTable rolesTable;
    private JProgressBar jProgressBar1;
    private JButton cancelButton;
    boolean execute_w;
    boolean enableElements;
    Icon gr, no, adm;
    Connection con;
    public static final String TITLE = Bundles.get(UserManagerPanel.class,"UserManager");
    public static final String FRAME_ICON = "user_manager_16.png";
    public IFBUserManager userManager;
    public BrowserController controller;
    List<DatabaseConnection> listConnections;
    Map<String, IFBUser> users;
    Vector<String> user_names;
    Vector<String> role_names;
    public IFBUser userAdd;
    ResultSet result;
    DatabaseConnection dbc;
    enum Action {
        REFRESH,
        GET_USERS,
        GET_ROLES,
        GET_MEMBERSHIP
    }
    Action act;
    // End of variables declaration
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel();
        databaseLabel = new JLabel();
        serverLabel = new JLabel();
        databaseBox = new JComboBox<>();
        serverBox = new JComboBox<>();
        jTabbedPane1 = new JTabbedPane();
        usersPanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        jScrollPane2 = new JScrollPane();
        membershipTable = new JTable();
        jScrollPane3 = new JScrollPane(membershipTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        usersTable = new JTable();
        rolesTable = new JTable();
        addUserButton = new JButton();
        addRoleButton = new JButton();
        editUserButton = new JButton();
        deleteUserButton = new JButton();
        deleteRoleButton = new JButton();
        refreshUsersButton = new JButton();
        rolesPanel = new JPanel();
        membershipPanel = new JPanel();
        membershipTable = new JTable();
        grantButton = new JButton();
        adminButton = new JButton();
        no_grantButton = new JButton();
        jProgressBar1 = new JProgressBar();
        cancelButton = new JButton();

        setName(""); // NOI18N

        cancelButton.setText(bundleString("cancelButton"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel1.setName("upPanel"); // NOI18N

        databaseLabel.setText(bundleString("database"));

        serverLabel.setText(bundleString("server"));

        databaseBox.setEditable(true);
        databaseBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseBoxActionPerformed(evt);
            }
        });

        serverBox.setEditable(true);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(databaseLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(serverLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cancelButton,GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(serverBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(databaseBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jProgressBar1,0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(databaseLabel)
                                        .addComponent(databaseBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(serverLabel)
                                        .addComponent(serverBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancelButton,0,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)
                                        .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.setToolTipText("");

        usersTable.setModel(new RoleTableModel(
                new Object[][]{

                },
                new String[]{
                        "User name", "First name", "Middle name", "Last name", "Active"
                }
        ));
        jScrollPane1.setViewportView(usersTable);
        rolesTable.setModel(new RoleTableModel(
                new Object[][]{

                },
                new String[]{
                        "Role name", "Owner"
                }
        ));
        jScrollPane2.setViewportView(rolesTable);

        addUserButton.setText(bundleString("Add"));
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });
        addRoleButton.setText(bundleString("Add"));
        addRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoleButtonActionPerformed(evt);
            }
        });

        editUserButton.setText(bundleString("Edit"));
        editUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setText(bundleString("Delete"));
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        deleteRoleButton.setText(bundleString("Delete"));
        deleteRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoleButtonActionPerformed(evt);
            }
        });

        refreshUsersButton.setText(bundleString("Refresh"));
        refreshUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshUserButtonActionPerformed(evt);
            }
        });


        GroupLayout usersPanelLayout = new GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
                usersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(usersPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(usersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(addUserButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editUserButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteUserButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(refreshUsersButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        usersPanelLayout.setVerticalGroup(
                usersPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(usersPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addUserButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editUserButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteUserButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshUsersButton)
                                .addGap(18, 18, 18)
                                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundleString("Users"), usersPanel);

        GroupLayout rolesPanelLayout = new GroupLayout(rolesPanel);
        rolesPanel.setLayout(rolesPanelLayout);
        rolesPanelLayout.setHorizontalGroup(
                rolesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(rolesPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(rolesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(addRoleButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteRoleButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        rolesPanelLayout.setVerticalGroup(
                rolesPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(rolesPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addRoleButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteRoleButton)
                                .addGap(18, 18, 18)
                                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundleString("Roles"), rolesPanel);


        membershipTable.setModel(new RoleTableModel(
                new Object[][]{

                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        membershipTable.setDefaultRenderer(Object.class, new BrowserTableCellRenderer());
        jScrollPane3.setViewportView(membershipTable);
        membershipTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                membershipMouseClicked(evt);
            }
        });

        grantButton.setIcon(gr);
        grantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grantButtonActionPerformed(evt);
            }
        });
        grantButton.setToolTipText("GRANT ROLE");

        adminButton.setIcon(adm);
        adminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminButtonActionPerformed(evt);
            }
        });
        adminButton.setToolTipText("GRANT ROLE WITH ADMIN OPTION");

        no_grantButton.setIcon(no);
        no_grantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                no_grantButtonActionPerformed(evt);
            }
        });
        no_grantButton.setToolTipText("REVOKE ROLE");

        GroupLayout membershipPanelLayout = new GroupLayout(membershipPanel);
        membershipPanel.setLayout(membershipPanelLayout);
        membershipPanelLayout.setHorizontalGroup(
                membershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, membershipPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(membershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(grantButton)
                                        .addComponent(adminButton)
                                        .addComponent(no_grantButton))
                                .addGap(32, 32, 32)
                                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
        );
        membershipPanelLayout.setVerticalGroup(
                membershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, membershipPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(membershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(membershipPanelLayout.createSequentialGroup()
                                                .addComponent(grantButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(adminButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(no_grantButton))
                                        .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                                .addContainerGap())
        );

        jTabbedPane1.addTab(bundleString("Membership"), membershipPanel);


        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(bundleString("Users"));
    }// </editor-fold>

    void init_user_manager() {
        if(con==null) {
            DatabaseDriver dd = null;
            List<DatabaseDriver> dds = driverRepository().findAll();
            for (DatabaseDriver d : dds) {
                if (d.getClassName().contains("FBDriver"))
                    dd = d;
                break;
            }
            URL[] urlDriver = new URL[0];
            Class clazzDriver = null;
            URL[] urls = new URL[0];
            Class clazzdb = null;
            Object o = null;
            Object odb = null;
            try {
                urlDriver = MiscUtils.loadURLs(dd.getPath());
                ClassLoader clD = new URLClassLoader(urlDriver);
                clazzDriver = clD.loadClass(dd.getClassName());
                o = clazzDriver.newInstance();
                Driver driver = (Driver) o;


            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
            try {

                urls = MiscUtils.loadURLs("./lib/fbplugin-impl.jar");
                ClassLoader cl = new URLClassLoader(urls, o.getClass().getClassLoader());
                clazzdb = cl.loadClass("biz.redsoft.FBUserImpl");
                odb = clazzdb.newInstance();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }

            userAdd = (IFBUser) odb;

            // todo Make sure object is created
            urls = new URL[0];
            clazzdb = null;
            odb = null;
            try {
                urls = MiscUtils.loadURLs("./lib/fbplugin-impl.jar");
                ClassLoader cl = new URLClassLoader(urls, o.getClass().getClassLoader());
                clazzdb = cl.loadClass("biz.redsoft.FBUserManagerImpl");
                odb = clazzdb.newInstance();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
            this.userManager = (IFBUserManager) odb;
        }
        else
        {
            Connection connection = null;
            try {
                connection = con.unwrap(Connection.class);
            } catch (SQLException e) {
                e.printStackTrace();
            }

            URL[] urls = new URL[0];
            Class clazzdb = null;
            Object odb = null;
            try {
                urls = MiscUtils.loadURLs("./lib/fbplugin-impl.jar");
                ClassLoader cl = new URLClassLoader(urls, connection.getClass().getClassLoader());
                clazzdb = cl.loadClass("biz.redsoft.FBUserImpl");
                odb = clazzdb.newInstance();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }

            userAdd = (IFBUser)odb;

            // todo Make sure object is created
            urls = new URL[0];
            clazzdb = null;
            odb = null;
            try {
                urls = MiscUtils.loadURLs("./lib/fbplugin-impl.jar");
                ClassLoader cl = new URLClassLoader(urls, connection.getClass().getClassLoader());
                clazzdb = cl.loadClass("biz.redsoft.FBUserManagerImpl");
                odb = clazzdb.newInstance();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
            this.userManager = (IFBUserManager)odb;
        }
    }



    private void databaseBoxActionPerformed(java.awt.event.ActionEvent evt) {

        if (execute_w) {
            dbc=listConnections.get(databaseBox.getSelectedIndex());
            if (listConnections.get(databaseBox.getSelectedIndex()).isConnected())
            {
                act=Action.REFRESH;
                execute_thread();
            }
            else {
                usersTable.setModel(new RoleTableModel(
                        new Object[][]{

                        },
                        bundleStrings(new String[]{
                                "UserName", "FirstName", "MiddleName", "LastName"
                        })
                ));
                JFrame frame_pass = new FrameLogin(this, listConnections.get(databaseBox.getSelectedIndex()).getUserName(),
                        listConnections.get(databaseBox.getSelectedIndex()).getUnencryptedPassword());
                frame_pass.setVisible(true);
                int width = Toolkit.getDefaultToolkit().getScreenSize().width;
                int height = Toolkit.getDefaultToolkit().getScreenSize().height;
                frame_pass.setLocation(width / 2 - frame_pass.getWidth() / 2, height / 2 - frame_pass.getHeight() / 2);
            }
        }
    }
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        setEnableElements(true);
    }

    void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {
        GUIUtilities.addCentralPane(bundleString("AddUser"),
                UserManagerPanel.FRAME_ICON,
                new WindowAddUser(this),
                null,
                true);
    }

    void editUserButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int ind = usersTable.getSelectedRow();
        if (ind >= 0) {
            String desc="";
            try {
                Statement state = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                result = state.executeQuery("SELECT SEC$DESCRIPTION FROM SEC$USERS WHERE SEC$USER_NAME='"+
                        ((IFBUser) (users.values().toArray()[ind])).getUserName()+"'");
                if(result.next())
                    desc=result.getString(1);
                state.close();
            }
            catch (Exception e)
            {
                Log.error(e.getMessage());
            }
            if (desc==null)
                desc="";
            GUIUtilities.addCentralPane(bundleString("EditUser"),
                    UserManagerPanel.FRAME_ICON,
                    new WindowAddUser(this, ((IFBUser) (users.values().toArray()[ind])),desc),
                    null,
                    true);
        }
    }

    void addRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        GUIUtilities.addCentralPane(bundleString("AddRole"),
                UserManagerPanel.FRAME_ICON,
                new WindowAddRole(this),
                null,
                true);
    }

    void refreshUserButtonActionPerformed(java.awt.event.ActionEvent evt) {
        act=Action.REFRESH;
        execute_thread();
    }

    void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int ind = usersTable.getSelectedRow();
        if (ind >= 0) {
            if (GUIUtilities.displayConfirmDialog(bundleString("message.confirm-delete-user")) == 0) {
                try {
                    userManager.delete(((IFBUser) (users.values().toArray()[ind])));
                } catch (Exception e) {
                    System.out.println(e.toString());
                }
                act=Action.REFRESH;
                execute_thread();
            }
        }
    }

    void deleteRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int ind = rolesTable.getSelectedRow();
        if (ind >= 0) {
            String role = (String) ((RoleTableModel) rolesTable.getModel()).getValueAt(ind, 0);
            if (GUIUtilities.displayConfirmDialog( bundleString("message.confirm-delete-role")+ role + "?") == 0)
                try {
                    Statement state = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                    state.execute("DROP ROLE " + role);
                    state.close();
                    act=Action.REFRESH;
                    execute_thread();
                } catch (Exception e) {
                    GUIUtilities.displayErrorMessage(e.getMessage());
                    System.out.println(e.toString());
                }
        }
    }

    private void grantButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int row = membershipTable.getSelectedRow();
        int col = membershipTable.getSelectedColumn();
        if(!enableElements)if (col >= 0) {
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("GRANT " + role_names.elementAt(col) + " TO " + user_names.elementAt(row) + ";");
                st.close();
                create_membership();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
        }
    }

    private void adminButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int row = membershipTable.getSelectedRow();
        int col = membershipTable.getSelectedColumn();
        if(!enableElements)if (col >= 0) {
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("GRANT " + role_names.elementAt(col) + " TO " + user_names.elementAt(row) + " WITH ADMIN OPTION;");
                st.close();
                create_membership();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
        }

    }

    private void no_grantButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int row = membershipTable.getSelectedRow();
        int col = membershipTable.getSelectedColumn();
        if (col >= 0)
        if (!enableElements){
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            create_membership();
        }
    }

    private void membershipMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() > 1) {
            int row = membershipTable.getSelectedRow();
            int col = membershipTable.getSelectedColumn();
            if(!enableElements)if (col >= 0) {
                if (((Icon) membershipTable.getValueAt(row, col)).equals(gr)) {
                    grant_with_admin(row, col);
                } else if (((Icon) membershipTable.getValueAt(row, col)).equals(adm)) {
                    revoke_grant(row, col);
                } else {
                    grant_to(row, col);
                }
            }
        }
    }
    void setEnableElements(boolean enable) {
        enableElements = enable;
        cancelButton.setVisible(!enable);
        jProgressBar1.setVisible(!enable);
        if (enable)
            jProgressBar1.setValue(0);
    }
    public void run() {
        switch (act) {
            case REFRESH:
                if (!enableElements)
                refresh();
                break;
            default:
                break;
        }
    }
    void grant_with_admin(int row, int col) {
        if (col >= 0) {
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();

            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("GRANT " + role_names.elementAt(col) + " TO " + user_names.elementAt(row) + " WITH ADMIN OPTION;");
                st.close();
                create_membership();

            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
        }
    }

    void grant_to(int row, int col) {
        if (col >= 0) {
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("GRANT " + role_names.elementAt(col) + " TO " + user_names.elementAt(row) + ";");
                st.close();
                create_membership();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
        }
    }

    void revoke_grant(int row, int col) {
        if (col >= 0) {
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                st.execute("REVOKE " + role_names.elementAt(col) + " FROM " + user_names.elementAt(row) + ";");
                st.close();
            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
            create_membership();
        }
    }

    void getUsersPanel() {
        try {

            users = userManager.getUsers();

            usersTable.setModel(new RoleTableModel(
                    new Object[][]{

                    },
                    bundleStrings(new String[]{
                            "UserName", "FirstName", "MiddleName", "LastName"
                    })
            ));
            user_names.clear();
            for (IFBUser u : users.values()) {
                user_names.add(u.getUserName().trim());
                Object[] rowData = new Object[]{u.getUserName(), u.getFirstName(), u.getMiddleName(), u.getLastName()};
                ((RoleTableModel) usersTable.getModel()).addRow(rowData);
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            GUIUtilities.displayErrorMessage(e.toString());
        }
    }

    public void refresh() {
        if (databaseBox.getItemAt(databaseBox.getSelectedIndex()) != "") {
            serverBox.removeAllItems();
            serverBox.addItem(listConnections.get(databaseBox.getSelectedIndex()).getHost());
        }
        userManager.setDatabase(listConnections.get(databaseBox.getSelectedIndex()).getSourceName());
        userManager.setHost(listConnections.get(databaseBox.getSelectedIndex()).getHost());
        userManager.setPort(listConnections.get(databaseBox.getSelectedIndex()).getPortInt());
        if (listConnections.get(databaseBox.getSelectedIndex()).isConnected()) {
            rolesPanel.setVisible(true);
            membershipPanel.setVisible(true);
            con = ConnectionManager.getConnection(listConnections.get(databaseBox.getSelectedIndex()));
            init_user_manager();
            userManager.setDatabase(listConnections.get(databaseBox.getSelectedIndex()).getSourceName());
            userManager.setHost(listConnections.get(databaseBox.getSelectedIndex()).getHost());
            userManager.setPort(listConnections.get(databaseBox.getSelectedIndex()).getPortInt());
            userManager.setUser(listConnections.get(databaseBox.getSelectedIndex()).getUserName());
            userManager.setPassword(listConnections.get(databaseBox.getSelectedIndex()).getUnencryptedPassword());
            getUsersPanel();
            get_roles();
            create_membership();
        } else {
            getUsersPanel();
            membershipPanel.setVisible(false);
            rolesPanel.setVisible(false);
        }
        int ind=jTabbedPane1.getSelectedIndex();
        jTabbedPane1.setSelectedIndex(1);
        jTabbedPane1.setSelectedIndex(2);
        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setSelectedIndex(ind);
        setEnableElements(true);
    }
    void get_roles()
    {
        try {
            Statement state = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
            result = state.executeQuery("SELECT RDB$ROLE_NAME,RDB$OWNER_NAME FROM RDB$ROLES ORDER BY" +
                    " RDB$ROLE_NAME");
            rolesTable.setModel(new RoleTableModel(
                    new Object[][]{

                    },
                    bundleStrings(new String[]{
                            "RoleName", "Owner"
                    })
            ));
            role_names.clear();
            while (result.next()) {
                String rol = result.getString(1).trim();
                role_names.add(rol);
                user_names.add(rol);
                Object[] roleData = new Object[]{rol, result.getObject(2)};
                ((RoleTableModel) rolesTable.getModel()).addRow(roleData);
            }
            state.close();
        } catch (Exception e) {
            GUIUtilities.displayErrorMessage(e.toString());
        }
    }
    void create_membership() {
        membershipTable.setModel(new RoleTableModel(
                new Object[][]{},
                role_names.toArray()
        ));
        jProgressBar1.setMaximum(user_names.size());
        for (int i = 0; i < user_names.size()&&!enableElements; i++) {
            jProgressBar1.setValue(i);
            try {
                Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                ResultSet rs1 = st.executeQuery("select distinct RDB$PRIVILEGE,RDB$GRANT_OPTION,rdb$Relation_name from RDB$USER_PRIVILEGES\n" +
                        "where (RDB$USER='" + user_names.elementAt(i) + "') and (rdb$object_type=8 or rdb$object_type=13)");
                Vector<Object> roleData = new Vector<Object>();
                for (String u : role_names) {
                    roleData.add(no);
                }
                while (rs1.next()) {
                    String u = rs1.getString(3);
                    u = u.trim();
                    int ind = role_names.indexOf(u);
                    if (rs1.getObject(2).equals(0))
                        roleData.set(ind, gr);
                    else
                        roleData.set(ind, adm);

                }
                st.close();
                ((RoleTableModel) membershipTable.getModel()).addRow(roleData);

            } catch (Exception e) {
                GUIUtilities.displayErrorMessage(e.getMessage());
            }
        }
        int sizer = 0;
        for (int i = 0; i < role_names.size(); i++) {
            int temper = role_names.elementAt(i).length() * 8;
            membershipTable.getColumn(role_names.elementAt(i)).setMinWidth(temper);
            sizer += temper;
        }

        JList rowHeader = new JList(user_names);
        rowHeader.setFixedCellWidth(150);
        rowHeader.setFixedCellHeight(membershipTable.getRowHeight());
        rowHeader.setCellRenderer(new RowHeaderRenderer(membershipTable));
        jScrollPane3.setRowHeaderView(rowHeader);
        int wid = jScrollPane3.getPreferredSize().width;
        if (sizer > wid)
            membershipTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        else
            membershipTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    }



    private DatabaseDriverRepository driverRepository() {
        return (DatabaseDriverRepository) RepositoryCache.load(
                DatabaseDriverRepository.REPOSITORY_ID);
    }

    public void addUser(String description) {
        try {
            userManager.add(userAdd);
            DatabaseHost host= new DefaultDatabaseHost(dbc);
            String version=host.getDatabaseProductName();
            if(version!=null)
            {
                int number=0;
                for (int i=0;i<version.length();i++)
                {
                    if (Character.isDigit(version.charAt(i)))
                    {
                        number=Character.getNumericValue(version.charAt(i));
                        break;
                    }
                }
                if (number>=3)
                {
                    try {
                        String query="COMMENT ON USER "+userAdd.getUserName()+ " is '"+description+"'";
                        Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                        st.executeQuery(query);
                        st.close();
                    }
                    catch (Exception e)
                    {
                        Log.error(e.getMessage());
                    }
                }
            }
            act=Action.REFRESH;
            execute_thread();
        } catch (Exception e) {
            GUIUtilities.displayErrorMessage(e.getMessage());
            System.out.println(e.toString());
        }
    }

    public void addRole(String role) {
        try {
            Statement state = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
            if (!state.execute("CREATE ROLE " + role))
                GUIUtilities.displayInformationMessage("Succes");
            state.close();
            act=Action.REFRESH;
            execute_thread();
        } catch (Exception e) {
            GUIUtilities.displayErrorMessage(e.getMessage());
            System.out.println(e.toString());
        }
    }

    public void editUser(String description) {
        try {
            userManager.update(userAdd);
            DatabaseHost host= new DefaultDatabaseHost(dbc);
            String version=host.getDatabaseProductName();
            if(version!=null)
            {
                int number=0;
                for (int i=0;i<version.length();i++)
                {
                    if (Character.isDigit(version.charAt(i)))
                    {
                        number=Character.getNumericValue(version.charAt(i));
                        break;
                    }
                }
                if (number>=3)
                {
                    try {
                        String query="COMMENT ON USER "+userAdd.getUserName()+ " is '"+description+"'";
                        Statement st = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                        st.executeQuery(query);
                        st.close();
                    }
                    catch (Exception e)
                    {
                        Log.error(e.getMessage());
                    }
                }
            }
            act=Action.REFRESH;
            execute_thread();
        } catch (Exception e) {
            GUIUtilities.displayErrorMessage(e.getMessage());
            System.out.println(e.toString());
        }
    }
    void execute_thread() {
        if (enableElements) {
            setEnableElements(false);
            Runnable r = new ThreadOfUserManager(this);
            Thread t = new Thread(r);
            t.start();
        }
    }

public String bundleString(String key)
{
    return Bundles.get(UserManagerPanel.class,key);
}
private String[] bundleStrings(String[] key)
    {
        for(int i=0;i<key.length;i++)
            key[i]=bundleString(key[i]);
        return key;
    }


}


